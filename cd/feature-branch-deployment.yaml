---
resources:
  - name: source-repo
    type: git
    icon: github
    webhook_token: ((webhook_token))
    source:
      uri: https://github.com/your-org/your-source-repo.git
      branch: ((branch_name))
      username: ((git_username))
      password: ((git_password))

  - name: ci-cd-repo
    type: git
    icon: github
    webhook_token: ((webhook_token))
    source:
      uri: https://github.com/your-org/your-ci-cd-repo.git
      branch: main
      username: ((git_username))
      password: ((git_password))

jobs:
  - name: build-and-deploy
    serial: true
    plan:
      - get: source-repo
        trigger: false

      - get: ci-cd-repo
        trigger: false

      - task: add-module
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: busybox
          inputs:
            - name: source-repo
          outputs:
            - name: source-repo
          run:
            path: /bin/sh
            dir: source-repo
            args:
              - -c
              - cp -r {{source_directory}}/{{module_name}} {{destination_directory}}

      - task: set-build-version
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: your-registry/your-image
              tag: alpine
              username: _json_key
              password: |
                ((service_account_key))
          inputs:
            - name: source-repo
          outputs:
            - name: source-repo
          run:
            path: /bin/sh
            dir: source-repo
            args:
              - -c
              - |
                epoch=$(date +%s)
                echo "Using $epoch as build number"
                echo feature-${branch}-${epoch} > tag.txt

      - load_var: build-tag
        file: source-repo/tag.txt
        reveal: true

      - task: build-image
        privileged: true
        file: ci-cd-repo/shared/pipelines/tasks/build-image.yaml
        vars:
          repo_name: source-repo
          context: {{docker_context_path}}
          tag: ((.:build-tag))

      - task: push-image
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: gcr.io/go-containerregistry/crane/debug
              tag: latest
          params:
            REPO_NAME: source-repo
            GOOGLE_JSON_CREDENTIALS: ((gcp_credentials))
            DESTINATION_IMAGE: your-gcp-registry/your-project/your-image
          inputs:
            - name: source-repo
            - name: ci-cd-repo
            - name: image
          run:
            path: /busybox/sh
            args:
              - -c
              - |
                export TAG=$(cat $REPO_NAME/tag.txt || echo latest)
                echo "Pushing $REPO_NAME:$TAG to $DESTINATION_IMAGE"
                echo $GOOGLE_JSON_CREDENTIALS > credentials.json
                crane auth login -u _json_key --password-stdin your-gcp-registry < credentials.json
                crane push "image/image.tar" "$DESTINATION_IMAGE:$TAG"

      - task: deploy
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: gcr.io/cloud-builders/kubectl
          inputs:
            - name: source-repo
          params:
            GIT_USER: ((git_username))
            GIT_PAT: ((git_password))
            NAMESPACE: your-namespace
            GCP_REGION: your-gcp-region
            GCP_PROJECT: your-gcp-project
            CLUSTER_NAME: your-cluster
            IMAGE_NAME: your-image
            SERVICE_NAME: your-service
            DEPLOYMENT_NAME: your-deployment
            DEPLOYMENT_FILE: kubernetes/deployment.yaml
            CONFIG_MAP_NAME: your-config-map
            CONFIG_MAP_FILE: kubernetes/config_map.yaml
            SERVICE_FILE: kubernetes/service.yaml
            GOOGLE_JSON_CREDENTIALS: ((gcp_credentials))
            FEATURE_TAG: ((.:build-tag))
          run:
            path: /bin/bash
            dir: source-repo/{{api-directory}}
            args:
              - -c
              - |
                set -xe
                apt-get update -y && apt-get install -y jq gettext
                ./deploy-scripts/deploy.sh
